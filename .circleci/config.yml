version: 2.1

# Aliases to reuse
_defaults: &defaults
  docker:
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    - image: cimg/python:3.11
  working_directory: ~/repo

commands:
  check-skip:
    steps:
      - run:
          name: Check-skip
          command: |
            if [ ! -d "scipy" ]; then
              echo "Build was not run due to skip, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi

            git_log=$(git log --max-count=1 --pretty=format:"%B" | tr "\n" " ")
            printf "Got commit message:\n${git_log}\n"
            if [[ -v CIRCLE_PULL_REQUEST ]] && [[ "${git_log}" =~ "^\[(circle skip|skip circle|lint only)\]" ]]; then
              echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi

  apt-install:
    steps:
      - run:
          name: Install apt packages
          environment:
            DEBIAN_FRONTEND: noninteractive
          command: |
            sudo apt-get update -y
            sudo apt-get install -y --no-install-recommends libopenblas-dev gfortran libgmp-dev libmpfr-dev ccache

jobs:
# Build SciPy from source
  build_scipy:
    <<: *defaults
    steps:
      - run:
          name: Checkout code
          environment:
            GIT_SSH_COMMAND: 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
            GIT_MERGE_AUTOEDIT: "no"
            GIT_AUTHOR_NAME: scipy-circleci-bot
            GIT_AUTHOR_EMAIL: scipy-circleci-bot@nomail
            GIT_COMMITER_NAME: scipy-circleci-bot
            GIT_COMMITER_EMAIL: scipy-circleci-bot@nomail
          command: |
            git clone --depth=1 --shallow-submodules --recurse-submodules -b "${CIRCLE_BRANCH}" "${CIRCLE_REPOSITORY_URL}" scipy;
            cd scipy;
            git config user.email "scipy-circleci-bot@nomail";
            git config user.name "scipy-circleci-bot";

            if [[ -v CIRCLE_PR_NUMBER ]]; then
              git fetch origin "+refs/pull/${CIRCLE_PR_NUMBER}/merge:pr" --depth=1;
              git checkout pr;
            else
              git fetch origin refs/heads/main:refs/remotes/origin/main --depth=1;
              git pull --rebase origin/main;
            fi

      - check-skip

      - apt-install

      - restore_cache:
          keys:
              - deps_ccache-{{ .Branch }}
              - deps_ccache

      # todo: cache this
      - run:
          name: setup Python venv
          command: |
            pip install --disable-pip-version-check uv
            uv pip install numpy cython pybind11 pythran ninja meson
            uv pip install -r requirements/doc.txt
            uv pip install mpmath gmpy2 "asv>=0.6.0" click rich-click doit pydevtool pooch threadpoolctl pyfftw cffi pytest

      - run:
          name: build SciPy
          command: |
            python dev.py build -j2

      - save_cache:
          key: deps_ccache-{{ .Branch }}
          paths:
            - ~/.ccache
            - ~/.cache/pip

      - run:
          name: ccache performance
          command: |
            ccache -s

      - persist_to_workspace:
          root: ~/
          paths:
            - .

# Build docs
  build_docs:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/

      - check-skip
      - apt-install

      - run:
          name: build docs
          no_output_timeout: 25m
          command: |
            export PYTHONPATH=$PWD/build-install/lib/python3.11/site-packages
            python dev.py --no-build doc 2>&1 | tee sphinx_log.txt

      - run:
          name: Check sphinx log for warnings (which are treated as errors)
          when: always
          command: |
            ! grep "^.* WARNING: .*$" sphinx_log.txt

      - store_artifacts:
          path: doc/build/html
          destination: html

      - persist_to_workspace:
          root: doc/build
          paths:
            - html

# Run benchmarks

  run_benchmarks:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/

      - check-skip
      - apt-install

      - run:
          name: run asv
          no_output_timeout: 30m
          environment:
            SCIPY_GLOBAL_BENCH_NUMTRIALS: 1
            SCIPY_ALLOW_BENCH_IMPORT_ERRORS: 0
            OPENBLAS_NUM_THREADS: 1
          command: |
            export PYTHONPATH=$PWD/build-install/lib/python3.11/site-packages
            cd benchmarks
            asv machine --machine CircleCI
            time asv --config asv.conf.json run -m CircleCI --quick --python=same --bench '^((?!BenchGlobal|QuadraticAssignment).)*$'
            asv --config asv.conf.json publish

      - store_artifacts:
          path: benchmarks/html
          destination: html-benchmarks

# Reference guide checking
  refguide_check:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/

      - check-skip
      - apt-install

      - run:
          name: refguide_check
          no_output_timeout: 25m
          command: |
            sudo apt-get install -y wamerican-small
            export PYTHONPATH=$PWD/build-install/lib/python3.11/site-packages
            python dev.py --no-build refguide-check

# Upload build output to scipy/devdocs repository, using SSH deploy keys.
# The keys are only available for builds on main branch.
# https://developer.github.com/guides/managing-deploy-keys/
# https://circleci.com/docs/2.0/configuration-reference/#add_ssh_keys

  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/build

      - add_ssh_keys:
          fingerprints:
            - "1d:47:cf:2e:ea:7c:15:cf:ec:bb:1f:44:e2:56:16:d3"

      - run:
          name: upload
          environment:
            GIT_SSH_COMMAND: 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
            GIT_AUTHOR_NAME: scipy-circleci-bot
            GIT_AUTHOR_EMAIL: scipy-circleci-bot@nomail
          command: |
            set -exuo pipefail;

            mkdir devdocs; cd devdocs;
            git init . -b gh-pages
            git remote add origin git@github.com:scipy/devdocs.git
            cp -R /tmp/build/html/. .
            touch .nojekyll
            git add . > /dev/null
            git commit -m "Docs build of ${CIRCLE_SHA1}"
            git push -u origin gh-pages -f

workflows:
  version: 2
  default:
    jobs:
      - build_scipy
      - build_docs:
          requires:
            - build_scipy
      - run_benchmarks:
          requires:
            - build_scipy
      - refguide_check:
          requires:
            - build_scipy
      - deploy:
          requires:
            - build_docs
          filters:
            branches:
              only: main
